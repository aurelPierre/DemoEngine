# Syntax reference https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions
# Environment reference https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners
name: Coverage

on: ["push", "pull_request"]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Coverage", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: "Debug", cc: "gcc", cxx: "g++"
          }

    steps:
    - name: Checkout reposistory
      uses: actions/checkout@master

    - name: Checkout submodules
      run: |
        sed -i'.back' 's/git@github.com:/https:\/\/github.com\//' .gitmodules
        git submodule update --init --recursive

    - name: Download Ninja and CMake
      uses: lukka/get-cmake@latest

    - name: Install missing package
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y lcov
        sudo apt-get install -y libxrandr-dev libx11-xcb-dev libxinerama-dev libxcursor-dev libxi-dev xvfb 

    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})

        execute_process(
          COMMAND cmake -S . -B build -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -G Ninja -D CODE_COVERAGE=ON
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Compile instrumented
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

        include(ProcessorCount)
        ProcessorCount(N)

        execute_process(
          COMMAND cmake --build build -j ${N}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Run tests
      run: |
        cd build
        xvfb-run ctest --output-on-failure -VV

    - name: Generate reports
      run: |
        lcov --directory . --capture --output-file coverage.info
        lcov --remove coverage.info '*/tests/*' '*/ThirdParty/*' '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
        lcov --list coverage.info

    - uses: codecov/codecov-action@v1
      with:
        # token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
        name: ${{ github.repository }} # optional
        fail_ci_if_error: true # optional (default = false):  