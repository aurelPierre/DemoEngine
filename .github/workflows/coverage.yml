# Syntax reference https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions
# Environment reference https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners
name: Coverage

on: ["push", "pull_request"]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Coverage", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: "Debug", cc: "gcc", cxx: "g++"
          }

    steps:
    - name: Checkout reposistory
      uses: actions/checkout@master

    - name: Checkout submodules
      run: |
        sed -i'.back' 's/git@github.com:/https:\/\/github.com\//' .gitmodules
        git submodule update --init --recursive

    - name: Download Ninja and CMake
      id: cmake_and_ninja
      shell: cmake -P {0}
      run: |
        set(ninja_version "1.9.0")
        set(cmake_version "3.16.2")
        
        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        set(ninja_suffix "linux.zip")
        set(cmake_suffix "Linux-x86_64.tar.gz")
        set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        message("::set-output name=cmake_dir::${cmake_dir}")

        execute_process(
          COMMAND chmod +x ninja
          COMMAND chmod +x ${cmake_dir}/cmake
        )

    - name: Install missing package
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y lcov
        sudo apt-get install -y libxrandr-dev libx11-xcb-dev libxinerama-dev libxcursor-dev libxi-dev xvfb 

    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})

        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/ninja" ninja_program)

        execute_process(
          COMMAND ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake
            -S .
            -B build
            -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
            -G Ninja
            -D CMAKE_MAKE_PROGRAM=${ninja_program}
            -D CODE_COVERAGE=ON
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Compile instrumented
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

        include(ProcessorCount)
        ProcessorCount(N)

        execute_process(
          COMMAND ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake --build build -j ${N}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Run tests
      run: |
        cd build
        Xvfb :99 &
        export DISPLAY=:99
        ruby headless.rb
        ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/ctest --output-on-failure -VV

    - name: Generate reports
      run: |
        lcov --directory . --capture --output-file coverage.info
        lcov --remove coverage.info '*/tests/*' '*/ThirdParty/*' '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
        lcov --list coverage.info

    - uses: codecov/codecov-action@v1
      with:
        # token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
        name: ${{ github.repository }} # optional
        fail_ci_if_error: true # optional (default = false):  