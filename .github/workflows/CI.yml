name: CI

on: ["push", "pull_request"]

jobs:
  windows:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      install_vulkan_sdk: "$GITHUB_WORKSPACE/vulkan_sdk/"
      install_vulkan_version: "1.2.148.1"
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: "Release", cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Windows Latest MinGW", artifact: "Windows-MinGW.tar.xz",
            os: windows-latest,
            build_type: "Release", cc: "gcc", cxx: "g++"
          }

    steps:
    - name: Checkout reposistory
      uses: actions/checkout@master

    - name: Checkout submodules
      run: |
        sed -i'.back' 's/git@github.com:/https:\/\/github.com\//' .gitmodules
        git submodule update --init --recursive

    - name: Download Ninja and CMake
      uses: lukka/get-cmake@latest

    - name: Install Vulkan SDK
      shell: pwsh
      run: |
        curl -LS -o vulkansdk.exe https://sdk.lunarg.com/sdk/download/${{ env.install_vulkan_version }}/windows/VulkanSDK-${{ env.install_vulkan_version }}-Installer.exe
        7z x vulkansdk.exe -o"${{ env.install_vulkan_sdk }}"

    - name: PATH Vulkan SDK
      shell: pwsh
      run: |
        $env:Path += ";${{ env.install_vulkan_sdk }}\;${{ env.install_vulkan_sdk }}\Bin\"

    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()
        execute_process(
          COMMAND cmake -S . -B build -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -G Ninja
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        include(ProcessorCount)
        ProcessorCount(N)

        execute_process(
          COMMAND cmake --build build -j ${N}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Install Strip
      run: cmake --install build --prefix instdir --strip

    - name: Pack
      working-directory: instdir
      run: cmake -E tar cJfv ../${{ matrix.config.artifact }} .

    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        path: ./${{ matrix.config.artifact }}
        name: ${{ matrix.config.artifact }}

  linux:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      install_vulkan_sdk: "$GITHUB_WORKSPACE/vulkan_sdk/"
      install_vulkan_version: "1.2.148.1"
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux-GCC.tar.xz",
            os: ubuntu-latest,
            build_type: "Release", cc: "gcc", cxx: "g++"
          }
        #- {
        #    name: "macOS Latest Clang", artifact: "macOS.tar.xz",
        #    os: macos-latest,
        #    build_type: "Release", cc: "clang", cxx: "clang++"
        #  }

    steps:
    - name: Checkout reposistory
      uses: actions/checkout@master

    - name: Checkout submodules
      run: |
        sed -i'.back' 's/git@github.com:/https:\/\/github.com\//' .gitmodules
        git submodule update --init --recursive

    - name: Download Ninja and CMake
      uses: lukka/get-cmake@latest

    - name: Install missing package
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y libxrandr-dev libx11-xcb-dev libxinerama-dev libxcursor-dev libxi-dev

    - name: Install Vulkan SDK
      shell: bash
      run: |
        # Download Vulkan SDK
        curl -LS -o vulkansdk.tar.gz https://sdk.lunarg.com/sdk/download/${{ env.install_vulkan_version }}/linux/vulkansdk-linux-x86_64-${{ env.install_vulkan_version }}.tar.gz
        # Create Vulkan SDK directory and extract
        mkdir -p "${{ env.install_vulkan_sdk }}"
        tar xfz vulkansdk.tar.gz -C "${{ env.install_vulkan_sdk }}"

    - name: Configure
      shell: bash
      run: |
        export CC=${{ matrix.config.cc }}
        export CXX=${{ matrix.config.cxx }}
        export VULKAN_SDK="${{ env.install_vulkan_sdk }}/${{ env.install_vulkan_version }}/x86_64"
        export PATH=$VULKAN_SDK/bin:$PATH
        export LD_LIBRARY_PATH=$VULKAN_SDK/lib:$LD_LIBRARY_PATH
        export VK_LAYER_PATH=$VULKAN_SDK/etc/explicit_layer.d

        cmake -S . -B build -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -G Ninja

    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

        include(ProcessorCount)
        ProcessorCount(N)

        execute_process(
          COMMAND cmake --build build -j ${N}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Install Strip
      run: cmake --install build --prefix instdir --strip

    - name: Pack
      working-directory: instdir
      run: cmake -E tar cJfv ../${{ matrix.config.artifact }} .

    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        path: ./${{ matrix.config.artifact }}
        name: ${{ matrix.config.artifact }}
